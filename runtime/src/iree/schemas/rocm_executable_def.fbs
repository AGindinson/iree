// Copyright 2021 The IREE Authors
//
// Licensed under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

namespace iree.hal.rocm;

// 'ROCM Executable'.
file_identifier "ROCM";
file_extension "rocm";

// A struct for a source code location that consists of a file name and
// a line number within that file.
table FileLineLocDef {
  filename:string;
  line:int32;
}

// Source location keyed by a string compilation stage name.
table StageLocationDef {
  stage:string;
  location:FileLineLocDef;
}

// Table of stage locations sorted in ascending order by stage name.
table StageLocationsDef {
  locations:[StageLocationDef];
}

// An embedded source file referenced by locations in the file.
table SourceFileDef {
  path:string;
  content:[uint8];
}

// Describes the behavior of each binding.
// Roughly maps to iree_hal_descriptor_flags_t but is not required to match
// exactly; if there's additional binding information we want to pass through
// to Metal we can encode that here.
enum BindingBits:uint64 (bit_flags) {
  // IREE_HAL_DESCRIPTOR_FLAG_READ_ONLY
  READ_ONLY = 0,  // 1u << 0
  // IREE_HAL_DESCRIPTOR_FLAG_INDIRECT
  INDIRECT = 1,  // 1u << 1
}

// A struct for the kernel block size along each dimensions.
struct BlockSize {
  x:uint32;
  y:uint32;
  z:uint32;
}

// Information about an exported function on the executable.
table ExportDef {
  // Ordinal of the shader library containing the entry point in the executable
  // libraries list.
  library_ordinal:uint32;

  // String name of the entry point function in the library.
  entry_point:string;

  // Grid block size for the export.
  block_size:BlockSize;

  // Size of dynamic shared memory.
  shared_memory_size:uint32;

  // Total number of 32-bit push constants used by the export.
  constant_count:uint32;

  // Binding count and flags for each binding.
  binding_flags:[BindingBits];

  // Optional source location of the export.
  source_location:FileLineLocDef;

  // Optional source location per entry point keyed by a string compilation
  // stage name. Sorted ascending by name.
  stage_locations:StageLocationsDef;
}

// A library containing one or more exported functions.
table LibraryDef {
  // HSACO image.
  hsaco_image:string;
}

table ExecutableDef {
  // TODO(#18154): remove all fields besides libraries and exports.
  // A map of entry point ordinals to string names as used in the shader
  // library.
  entry_points:[string];

  // TODO(#18154): remove all fields besides libraries and exports.
  // Block sizes for each entry point.
  // This list has the same size as the entry_points list.
  block_sizes:[BlockSize];

  // TODO(#18154): remove all fields besides libraries and exports.
  // Size of dynamic shared memory.
  // This list has the same size as the entry_points list.
  shared_memory_sizes:[uint32];

  // TODO(#18154): remove all fields besides libraries and exports.
  // HSACO string of the module.
  hsaco_image:string;

  // TODO(#18154): remove all fields besides libraries and exports.
  // A map of entry point ordinals to source locations.
  // This information is optional and may be used by debuggers and profilers to
  // associate executable entry points with the source that generated them.
  source_locations:[FileLineLocDef];

  // TODO(#18154): remove all fields besides libraries and exports.
  // Table of source locations per entry point keyed by a string compilation
  // stage name. Sorted ascending by name.
  stage_locations:[StageLocationsDef];

  // Embedded source files sorted ascending by path.
  source_files:[SourceFileDef];

  // A list of all kernel libraries used by the executable.
  // Exports index into this list and multiple exports may use the same library.
  libraries:[LibraryDef];

  // Exported functions in canonical executable entry point order.
  exports:[ExportDef];
}

root_type ExecutableDef;
